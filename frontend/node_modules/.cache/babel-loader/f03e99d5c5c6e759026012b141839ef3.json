{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\"; // frontend/src/index.js\n// ... other importsimport { restoreCSRF, csrfFetch } from './csrf';\n\nimport * as sessionActions from './session';\nimport sessionReducer from \"./session\";\nconst store = configureStore();\n\nif (process.env.NODE_ENV !== 'production') {\n  restoreCSRF();\n  window.csrfFetch = csrfFetch;\n  window.store = store;\n  window.sessionActions = sessionActions;\n} // ...\n// frontend/src/store/index.js\n// ...\n\n\nconst rootReducer = combineReducers({\n  session: sessionReducer\n});\nlet enhancer;\n\nif (process.env.NODE_ENV === \"production\") {\n  enhancer = applyMiddleware(thunk);\n} else {\n  const logger = require(\"redux-logger\").default;\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  enhancer = composeEnhancers(applyMiddleware(thunk, logger));\n}\n\nconst configureStore = preloadedState => {\n  return createStore(rootReducer, preloadedState, enhancer);\n}; // frontend/src/index.js\n// ... other imports\n// ... const store = configureStore();\n\n\nif (process.env.NODE_ENV !== 'production') {\n  restoreCSRF();\n  window.csrfFetch = csrfFetch;\n  window.store = store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["/home/james/projects/panregro/frontend/src/store/index.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","sessionActions","sessionReducer","store","configureStore","process","env","NODE_ENV","restoreCSRF","window","csrfFetch","rootReducer","session","enhancer","logger","require","default","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","preloadedState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CACA;AACA;;AACA,OAAO,KAAKC,cAAZ,MAAgC,WAAhC;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,MAAMC,KAAK,GAAGC,cAAc,EAA5B;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,EAAAA,WAAW;AAEXC,EAAAA,MAAM,CAACC,SAAP,GAAmBA,SAAnB;AACAD,EAAAA,MAAM,CAACN,KAAP,GAAeA,KAAf;AACAM,EAAAA,MAAM,CAACR,cAAP,GAAwBA,cAAxB;AACD,C,CACD;AACA;AACA;;;AACA,MAAMU,WAAW,GAAGd,eAAe,CAAC;AAClCe,EAAAA,OAAO,EAAEV;AADyB,CAAD,CAAnC;AAGA,IAAIW,QAAJ;;AAEA,IAAIR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCM,EAAAA,QAAQ,GAAGf,eAAe,CAACE,KAAD,CAA1B;AACD,CAFD,MAEO;AACL,QAAMc,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,OAAvC;;AACA,QAAMC,gBAAgB,GACpBR,MAAM,CAACS,oCAAP,IAA+CnB,OADjD;AAEAc,EAAAA,QAAQ,GAAGI,gBAAgB,CAACnB,eAAe,CAACE,KAAD,EAAQc,MAAR,CAAhB,CAA3B;AACD;;AAED,MAAMV,cAAc,GAAIe,cAAD,IAAoB;AACzC,SAAOvB,WAAW,CAACe,WAAD,EAAcQ,cAAd,EAA8BN,QAA9B,CAAlB;AACD,CAFD,C,CAKA;AACA;AAGA;;;AAEA,IAAIR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,EAAAA,WAAW;AAEXC,EAAAA,MAAM,CAACC,SAAP,GAAmBA,SAAnB;AACAD,EAAAA,MAAM,CAACN,KAAP,GAAeA,KAAf;AACD;;AACD,eAAeC,cAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n// frontend/src/index.js\n// ... other importsimport { restoreCSRF, csrfFetch } from './csrf';\nimport * as sessionActions from './session';\nimport sessionReducer from \"./session\";\nconst store = configureStore();\n\nif (process.env.NODE_ENV !== 'production') {\n  restoreCSRF();\n\n  window.csrfFetch = csrfFetch;\n  window.store = store;\n  window.sessionActions = sessionActions;\n}\n// ...\n// frontend/src/store/index.js\n// ...\nconst rootReducer = combineReducers({\n  session: sessionReducer,\n});\nlet enhancer;\n\nif (process.env.NODE_ENV === \"production\") {\n  enhancer = applyMiddleware(thunk);\n} else {\n  const logger = require(\"redux-logger\").default;\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  enhancer = composeEnhancers(applyMiddleware(thunk, logger));\n}\n\nconst configureStore = (preloadedState) => {\n  return createStore(rootReducer, preloadedState, enhancer);\n};\n\n\n// frontend/src/index.js\n// ... other imports\n\n\n// ... const store = configureStore();\n\nif (process.env.NODE_ENV !== 'production') {\n  restoreCSRF();\n\n  window.csrfFetch = csrfFetch;\n  window.store = store;\n}\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}