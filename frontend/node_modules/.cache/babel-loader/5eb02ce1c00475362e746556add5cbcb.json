{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\"; // frontend/src/index.js\n// ... other imports\n\nimport { restoreCSRF, csrfFetch } from \"./csrf\";\nimport * as sessionActions from \"./session\";\nimport sessionReducer from \"./session\";\nimport pantryReducer from \"./pantry\";\nimport itemReducer from \"./\";\nconst rootReducer = combineReducers({\n  session: sessionReducer,\n  pantry: pantryReducer\n});\nlet enhancer;\n\nconst configureStore = preloadedState => {\n  return createStore(rootReducer, preloadedState, enhancer);\n};\n\nconst store = configureStore();\n\nif (process.env.NODE_ENV !== \"production\") {\n  restoreCSRF();\n  window.csrfFetch = csrfFetch;\n  window.store = store;\n  window.sessionActions = sessionActions;\n} // ...\n// frontend/src/store/index.js\n// ...\n\n\nif (process.env.NODE_ENV === \"production\") {\n  enhancer = applyMiddleware(thunk);\n} else {\n  const logger = require(\"redux-logger\").default;\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  enhancer = composeEnhancers(applyMiddleware(thunk, logger));\n} // frontend/src/index.js\n// ... other imports\n// ... const store = configureStore();\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  restoreCSRF();\n  window.csrfFetch = csrfFetch;\n  window.store = store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["/home/james/projects/panregro/frontend/src/store/index.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","restoreCSRF","csrfFetch","sessionActions","sessionReducer","pantryReducer","itemReducer","rootReducer","session","pantry","enhancer","configureStore","preloadedState","store","process","env","NODE_ENV","window","logger","require","default","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CACA;AACA;;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,QAAvC;AACA,OAAO,KAAKC,cAAZ,MAAgC,WAAhC;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,OAAOC,aAAP,MAA0B,UAA1B;AACA,OAAOC,WAAP,MAAwB,IAAxB;AACA,MAAMC,WAAW,GAAGV,eAAe,CAAC;AAClCW,EAAAA,OAAO,EAAEJ,cADyB;AAElCK,EAAAA,MAAM,EAAEJ;AAF0B,CAAD,CAAnC;AAIA,IAAIK,QAAJ;;AACA,MAAMC,cAAc,GAAIC,cAAD,IAAoB;AACzC,SAAOhB,WAAW,CAACW,WAAD,EAAcK,cAAd,EAA8BF,QAA9B,CAAlB;AACD,CAFD;;AAGA,MAAMG,KAAK,GAAGF,cAAc,EAA5B;;AAEA,IAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCf,EAAAA,WAAW;AAEXgB,EAAAA,MAAM,CAACf,SAAP,GAAmBA,SAAnB;AACAe,EAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACAI,EAAAA,MAAM,CAACd,cAAP,GAAwBA,cAAxB;AACD,C,CACD;AACA;AACA;;;AAEA,IAAIW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCN,EAAAA,QAAQ,GAAGZ,eAAe,CAACE,KAAD,CAA1B;AACD,CAFD,MAEO;AACL,QAAMkB,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,OAAvC;;AACA,QAAMC,gBAAgB,GACpBJ,MAAM,CAACK,oCAAP,IAA+CvB,OADjD;AAEAW,EAAAA,QAAQ,GAAGW,gBAAgB,CAACvB,eAAe,CAACE,KAAD,EAAQkB,MAAR,CAAhB,CAA3B;AACD,C,CAED;AACA;AAEA;;;AAEA,IAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCf,EAAAA,WAAW;AAEXgB,EAAAA,MAAM,CAACf,SAAP,GAAmBA,SAAnB;AACAe,EAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACD;;AACD,eAAeF,cAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n// frontend/src/index.js\n// ... other imports\nimport { restoreCSRF, csrfFetch } from \"./csrf\";\nimport * as sessionActions from \"./session\";\nimport sessionReducer from \"./session\";\nimport pantryReducer from \"./pantry\";\nimport itemReducer from \"./\"\nconst rootReducer = combineReducers({\n  session: sessionReducer,\n  pantry: pantryReducer,\n});\nlet enhancer;\nconst configureStore = (preloadedState) => {\n  return createStore(rootReducer, preloadedState, enhancer);\n};\nconst store = configureStore();\n\nif (process.env.NODE_ENV !== \"production\") {\n  restoreCSRF();\n\n  window.csrfFetch = csrfFetch;\n  window.store = store;\n  window.sessionActions = sessionActions;\n}\n// ...\n// frontend/src/store/index.js\n// ...\n\nif (process.env.NODE_ENV === \"production\") {\n  enhancer = applyMiddleware(thunk);\n} else {\n  const logger = require(\"redux-logger\").default;\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  enhancer = composeEnhancers(applyMiddleware(thunk, logger));\n}\n\n// frontend/src/index.js\n// ... other imports\n\n// ... const store = configureStore();\n\nif (process.env.NODE_ENV !== \"production\") {\n  restoreCSRF();\n\n  window.csrfFetch = csrfFetch;\n  window.store = store;\n}\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}